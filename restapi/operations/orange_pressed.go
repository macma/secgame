// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrangePressedHandlerFunc turns a function with the right signature into a orange pressed handler
type OrangePressedHandlerFunc func(OrangePressedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OrangePressedHandlerFunc) Handle(params OrangePressedParams) middleware.Responder {
	return fn(params)
}

// OrangePressedHandler interface for that can handle valid orange pressed params
type OrangePressedHandler interface {
	Handle(OrangePressedParams) middleware.Responder
}

// NewOrangePressed creates a new http.Handler for the orange pressed operation
func NewOrangePressed(ctx *middleware.Context, handler OrangePressedHandler) *OrangePressed {
	return &OrangePressed{Context: ctx, Handler: handler}
}

/*OrangePressed swagger:route POST /api/v1/orange orangePressed

OrangePressed orange pressed API

*/
type OrangePressed struct {
	Context *middleware.Context
	Handler OrangePressedHandler
}

func (o *OrangePressed) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewOrangePressedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// OrangePressedOKBody orange pressed o k body
//
// swagger:model OrangePressedOKBody
type OrangePressedOKBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this orange pressed o k body
func (o *OrangePressedOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OrangePressedOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OrangePressedOKBody) UnmarshalBinary(b []byte) error {
	var res OrangePressedOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
